% f1 Sphere Function  -1400
% f2 Rotated High Conditioned Elliptic Function  -1300
% f3 Rotated Bent Cigar Function    -1200
% f4 Rotated Discus Function  -1100
% f5 Different Powers Function  -1000
% f6 Rotated Rosenbrock's Function  -900
% f7 Rotated Schaffers F7 Function  -800
% f8 Rotated Ackley's Function  -700
% f9 Rotated Weierstrass Function  -600
% f10 Rotated Griewank's Function  -500
% f11 Rastrigin's Function  -400
% f12 Rotated Rastrigin's Function  -300
% f13 Non-Continuous Rotated Rastrigin's Function  -200
% f14 Schwefel's Function  -100
% f15 Rotated Schwefel's Function  100
% f16 Rotated Katsuura Function  200
% f17 Lunacek Bi_Rastrigin Function  300
% f18 Rotated Lunacek Bi_Rastrigin Function  400
% f19 Expanded Griewank's plus Rosenbrock's Function  500
% f20 Expanded Scaffer's F6 Function  600
% f21 Composition Function 1  700
% f22 Composition Function 2  800
% f23 Composition Function 3  900
% f24 Composition Function 4  1000
% f25 Composition Function 5  1100
% f26 Composition Function 6  1200
% f27 Composition Function 7  1300
% f28 Composition Function 8  1400

function fitness_value=Benchmark_30D(id,dim,x)
o=[-8.604494 -13.109223 10.009632 -0.454948 -18.801504
    13.125138 -18.325372 -4.651236 18.233694 6.678644
    -16.180747 -8.418522 -15.076539 -16.816733 -13.046428
    8.120979 -7.917958 10.512607 -15.649702 15.655756
    11.567912 3.951575 -17.143994 8.516336 -10.515220
    -16.135505 -5.474534 13.185994 -16.985581 -1.282215
    -11.505639 13.829163 -7.142808 -13.415833 -14.572662
    6.232317 -5.513385 4.312553 6.869823 8.936262
    19.802140 6.031980 -17.187535 -17.665275 5.353513
    7.296784 -17.734458 -12.141012 16.682443 -5.006450
    10.755733 15.377842 -17.708301 -15.680073 -8.365107
    12.964158 4.559179 -9.652265 10.021560 13.441481
    3.071705 9.669161 -14.149938 -0.813131 19.644908
    15.552489 9.627098 -4.526534 2.722921 -12.752207
    5.578659 -6.621937 10.222425 -2.812943 17.196068
    16.361960 12.318505 18.043591 -6.824244 10.282973
    -6.050885 -10.782242 16.582101 10.313056 8.245392
    -9.918710 -1.803979 3.269215 -8.741562 -8.166798
    5.520711 8.545352 -16.719648 12.310945 -10.577121
    18.447217 -9.920281 -6.069156 -5.651671 -1.287462
    -4.813062 -5.720909 -10.055134 8.574314 -13.559127
    -4.324001 -13.043427 8.439084 -19.000187 -9.828040
    6.500681 -11.603086 -6.926294 -12.567298 1.218169
    -4.476831 -9.152157 -3.479848 8.517734 15.839531
    -7.596509 -2.896509 2.726513 1.188155 2.413191
    6.579460 6.042652 10.484260 -4.339537 7.573187
    17.226948 -4.305911 10.462063 13.632041 12.222174
    -6.579823 -15.392881 -12.388032 -4.255906 -10.984356
    -0.299267 7.699753 1.110966 17.558471 -16.302169
    -7.136649 -0.318597 -7.826916 4.164727 -3.329052];
M1=[0.025438705632519500	0.027287094150185500	0.047038238940790500	0.247510691017284000	0.170564877225484000	0.080401259532007100	0.039478573492190700	0.126564935420080000	0.042466308473986400	0.112788914245631000	0.124053987094370000	0.109082251888015000	0.058373656904485400	0.172309832202819000	0.029596808085825900	0.380930779980033000	0.382272393549524000	0.042528872056104500	0.100068480133230000	0.409594860818689000	0.007898416971709290	0.150472334967763000	0.236404825531591000	0.207346032458398000	0.233887420324675000	0.208474975169015000	0.173995033131779000	0.181809856626226000	0.130736116084621000	0.187648836559181000
    0.005071697229650380	0.124839270888878000	0.139488695408647000	0.057376432235862200	0.321123953221312000	0.377089041035256000	0.034636142833422100	0.327312807077380000	0.015239983566718400	0.050118177313730000	0.090009015198084600	0.089448384363837200	0.234401594945024000	0.163427856484938000	0.016749609738087400	0.243692386613267000	0.020447729747970800	0.034040767515120900	0.118305033166496000	0.343777811680734000	0.145302060326343000	0.175861999955265000	0.013209234092236300	0.037527939982076000	0.389857304929267000	0.195857874356538000	0.046479051685935600	0.106851428094678000	0.050117905773414300	0.232393445473851000
    0.096345770230801900	0.458128599578605000	0.083470312944776800	0.102350499766221000	0.009343046025833700	0.114484643662552000	0.031838475159333300	0.162715766540786000	0.219283913098606000	0.102345839264855000	0.038798020560339600	0.052095162063492600	0.259604253725700000	0.117433724661609000	0.045172702798474200	0.181954317276675000	0.022159043973879300	0.163646799537561000	0.002723327358794600	0.147406365067522000	0.103905227279136000	0.451526131280724000	0.107982932466444000	0.291102427615031000	0.090729433330921300	0.039691978174271100	0.000104881885976779	0.224545360846809000	0.247700599797998000	0.248862212470443000
    0.333533943529546000	0.036078695879534600	0.476554593277457000	0.099094723880598500	0.096405479225274200	0.086977688076688800	0.172019479055129000	0.101468874497079000	0.168738239734359000	0.003009029916857790	0.096162204798648400	0.232620648798885000	0.388676205698000000	0.055360301265719800	0.042458578391001000	0.308567677444168000	0.080577157869797000	0.020466327011329900	0.019247279873025300	0.009477927941589990	0.260860178520982000	0.068955811329381100	0.348605195417032000	0.036058519548434800	0.001197031124203070	0.076628729516894200	0.074379414331329100	0.090367155105399800	0.158156468185284000	0.056619644975861000
    0.128724879173894000	0.120512460297471000	0.341058786029446000	0.242900672382201000	0.210638812152823000	0.332057245162790000	0.217535781218036000	0.100242364564891000	0.173787347281551000	0.036957981543362100	0.256743138499640000	0.128033016108683000	0.012475672408492800	0.093436126758183300	0.024190857559238000	0.067038849262885800	0.013506476717143400	0.046848270327996100	0.078063449372983000	0.056172908455195100	0.039188930267176800	0.096633411443512000	0.238476390413246000	0.078776092875008400	0.026305974732178800	0.173547944968551000	0.420719336336901000	0.164494414243900000	0.146202231185352000	0.334536804994179000
    0.095265211112953600	0.081334410106385200	0.012113232055966400	0.133926032600594000	0.183722728907430000	0.259774637810119000	0.027703680205199000	0.246526258691133000	0.098741846240625400	0.117577303160889000	0.058045180230315100	0.145148938718385000	0.118380639229418000	0.045266735017456700	0.122723159261567000	0.006304425926067190	0.263891718014476000	0.217600855651235000	0.490711115517761000	0.087029798869389500	0.275200650197816000	0.078571659066792200	0.176606140595994000	0.329456618978449000	0.009948669894445080	0.138581739500942000	0.321500612450120000	0.042127033506160900	0.112557950407436000	0.012640921446957500
    0.150361703096864000	0.038387770151311300	0.179236319391522000	0.140368836323997000	0.053772487940437000	0.203739213185482000	0.154824378470957000	0.027631820469565400	0.097450943115823000	0.075096190002114100	0.097678050218688100	0.044903783748242500	0.301154658009623000	0.005286277417661490	0.426173550970943000	0.099435936752057600	0.322072533179749000	0.146792267918283000	0.202698953973347000	0.081791696687507500	0.124510727574534000	0.199694524871626000	0.376607684544766000	0.190233172967466000	0.056769054042641100	0.246358691417107000	0.144522072984649000	0.134780938306951000	0.092618189470469100	0.167398355815097000
    0.011666239692355300	0.077823864326421900	0.059515770965087700	0.100726547135593000	0.124870082543081000	0.191963676096708000	0.350452488862444000	0.038215438412534100	0.351993597269650000	0.026952181873705000	0.067424289751642400	0.362553475569140000	0.014973664799702000	0.285544470892962000	0.007848880977472460	0.089205156699961800	0.267820897385598000	0.062409790453147900	0.091737287084539200	0.021882596358797600	0.132252174581136000	0.169713928758502000	0.248472756565019000	0.237733941479717000	0.257314533375380000	0.193096097745926000	0.085937027826380200	0.303768729405324000	0.000022912555047442	0.027906287304280600
    0.021576026299378800	0.248723204874373000	0.027403023558532700	0.119217684929790000	0.251539859300702000	0.018875468731285500	0.004738680605999820	0.277475112806291000	0.077398937143205500	0.083496363793312400	0.162156699299607000	0.083747923028068200	0.188176674169229000	0.332166223944336000	0.135848320224999000	0.109860264456329000	0.332804241814000000	0.200192738699286000	0.013133115235720500	0.152527093009146000	0.228941351727777000	0.151059968285923000	0.194374184723308000	0.192741007109708000	0.043941105033450200	0.320413807716182000	0.189513411076544000	0.248456927492907000	0.069717173289796000	0.167288296835301000
    0.010235396014780400	0.026749477222620800	0.047171157784657700	0.083374995144997500	0.323954050014336000	0.068316019645419900	0.155131766655301000	0.365978585228835000	0.003288509067489010	0.164389257585417000	0.543175043058501000	0.148095649992803000	0.087898767320018100	0.029996749291796800	0.231628121531036000	0.117325660180105000	0.050931602236226700	0.209578451643104000	0.009524763516046100	0.158365069014204000	0.163051374605183000	0.084217220408184600	0.065165958952428600	0.085957408296589000	0.030162518990907800	0.099631865750559300	0.303866377413923000	0.252831003179622000	0.044397543334701100	0.127546274081478000
    0.085354885882163400	0.236686157406768000	0.114722540298012000	0.060666865436385600	0.318869630878220000	0.062957069251515500	0.019552887245322400	0.003577569958321750	0.320902193703979000	0.117002904343365000	0.067860674800656200	0.217551559721229000	0.206594115182294000	0.425167521373852000	0.180080447006595000	0.086034874414071700	0.148508353462147000	0.165564221914018000	0.012483831479851100	0.250370972166323000	0.029994545082511200	0.013242849829734100	0.199195689421695000	0.231764026764578000	0.175044602621108000	0.055976940972133100	0.100191207550870000	0.287930169778633000	0.197290615815697000	0.097564531962055100
    0.073182559988297200	0.195497782976982000	0.316202168049242000	0.113612587302637000	0.043712493807140600	0.149709400816965000	0.098442563294618700	0.042603554838006600	0.261338305155407000	0.518098146827385000	0.086719579572728800	0.063872204833095800	0.202937207146822000	0.116964730370562000	0.247813195838170000	0.021890623080052400	0.051708444141061800	0.139990511127962000	0.141109034844202000	0.096557891241509900	0.261470598584627000	0.203351333781710000	0.006889197146122370	0.146413673944996000	0.088025838723213400	0.146043319332088000	0.253097900307452000	0.161326337402498000	0.184631272207238000	0.081642102730756600
    0.225240188168275000	0.047007847937688100	0.165413102697953000	0.014908073651114000	0.308675828450908000	0.217351202269289000	0.060045165712484100	0.243549270556821000	0.027517293520574000	0.001560515285220050	0.066906767136261300	0.245695983631560000	0.156217996998820000	0.182080304235057000	0.166782124909875000	0.366406250866925000	0.232477052581251000	0.126631808392329000	0.102343040093184000	0.245557455428355000	0.058326044388249200	0.256529864940510000	0.153236433616107000	0.121415894879371000	0.153336212074085000	0.101490154991571000	0.379954564130225000	0.042569256516166400	0.009361171543373770	0.020871941576291400
    0.054351878490330300	0.016802049690305300	0.204592294299082000	0.168602670659461000	0.057278642336244600	0.069526513628065000	0.255342270018992000	0.445665011089890000	0.052471220161677500	0.092710297442996400	0.350613442647535000	0.076355282036158600	0.065122273092573700	0.046249541529770100	0.336509158033524000	0.103688261228446000	0.278247086048650000	0.186104515584433000	0.102245082857967000	0.039490358415327000	0.343546151499957000	0.028729388188468000	0.004257159443602870	0.070505786149958400	0.068403125619177900	0.030675464703604900	0.066201055602950200	0.024667264215534400	0.127160147247513000	0.330726272617467000
    0.278535025661230000	0.106604269011682000	0.154664206107411000	0.125431691142089000	0.205401986290346000	0.090504362327504100	0.036937774137097200	0.154946108159092000	0.291290287077137000	0.208190507378094000	0.032326406221135200	0.316574790381918000	0.180223696156550000	0.034373119028694300	0.198676440334571000	0.078542236983804200	0.052826738461268800	0.190709218061506000	0.085658411837892700	0.063904820125073700	0.148596365348298000	0.292733894715533000	0.191337494427363000	0.079153614782606700	0.097181209003855100	0.169108794318795000	0.245918275888525000	0.053488134743014300	0.142181801936069000	0.405042092503252000
    0.001151867079678560	0.112150987652559000	0.179050040801655000	0.052649762035088900	0.053808957040529500	0.275488722229758000	0.067739053497735500	0.048184322987409300	0.183540530805094000	0.054417778918828100	0.271035500659867000	0.043504964740764200	0.116305362923257000	0.013722605913696100	0.202535384426564000	0.310953887627581000	0.140103355747573000	0.212736439018156000	0.340147828370390000	0.304738283619985000	0.004232731257675630	0.221968282602806000	0.207701278864898000	0.039151129614476400	0.040274216240609600	0.216695473289107000	0.357697308804876000	0.055311381489783700	0.169146935844426000	0.166889648594532000
    0.271697422567091000	0.120757822960557000	0.102028905902477000	0.052312815557682300	0.123764859378177000	0.182495847508609000	0.279350517777777000	0.097977593461147600	0.240455056986021000	0.037466225578444600	0.165742061788218000	0.355001069381489000	0.098680802399940600	0.192058985124782000	0.102482177250309000	0.097172368628746600	0.147258403255786000	0.318770917821712000	0.293315873179470000	0.021434646509860400	0.071069013485495900	0.075880879353758200	0.062657262706723600	0.167180962726788000	0.278146156352515000	0.022043424123551500	0.040828292655801900	0.207749991039486000	0.328041852307483000	0.011713650141782000
    0.364906403501139000	0.172462242558184000	0.394789107926344000	0.125116907345869000	0.146680853760756000	0.037853577637493300	0.064330043401990700	0.150962071869931000	0.029715967585827700	0.095283990211351500	0.106753092773611000	0.232525846435659000	0.081722506690155000	0.094596895440718700	0.116532404968021000	0.190521134822761000	0.213884189347329000	0.046014540608932500	0.076254001257077500	0.174235444679050000	0.153324878624327000	0.170233610575709000	0.150943138580769000	0.377891518912490000	0.029954834281924900	0.185260793308303000	0.060045116326423800	0.102309994809432000	0.290116540743656000	0.198015247053605000
    0.033383371458300100	0.149215850496259000	0.103096161396743000	0.335253029987303000	0.144589753150309000	0.103232287661727000	0.174219315933858000	0.114438890318771000	0.028275412888656800	0.314011925353195000	0.134055343867885000	0.029707269824180100	0.157289729000666000	0.103947700759486000	0.253647440099507000	0.283920182778178000	0.087831087362921100	0.378704792627994000	0.115318602332806000	0.005442369340525610	0.090726357624848200	0.257510518658653000	0.131649548858730000	0.072961361362081600	0.297631371202786000	0.330461384575411000	0.089047480515150500	0.018103711980143500	0.098640814041950900	0.049009416354971100
    0.072376790831368100	0.433194578870424000	0.189652557939587000	0.459946354647473000	0.090798893479324200	0.082681537757733400	0.288223085585936000	0.080103655826236900	0.004547098627225380	0.103425784660967000	0.059496544809422900	0.294201553399765000	0.127694385869883000	0.206884071715333000	0.066065638840074500	0.069201583357255600	0.037876700912468200	0.100193137049460000	0.083018235097074900	0.231010314553852000	0.026952294318116400	0.135077433882585000	0.225674124124317000	0.154836414165114000	0.051487777944185500	0.005440090665346550	0.085520879961889100	0.007683626570656260	0.232200262279278000	0.237415581191674000
    0.036130451818501700	0.117319897746935000	0.064973832138255500	0.249333353384636000	0.167827748474683000	0.072324745775348300	0.240863143969556000	0.012468204075698300	0.014073781041521900	0.065519037146675900	0.097454291270973900	0.041394594343921500	0.128741643663857000	0.114016268969342000	0.036349247943486700	0.026487001632071900	0.221324396347269000	0.124291082751128000	0.056062754921258200	0.086740861083096100	0.200829384996882000	0.067972128364359000	0.182018744153263000	0.372907235524453000	0.498108810229817000	0.424488054859923000	0.069720859388681100	0.153145255034715000	0.076877471644319100	0.157815088384418000
    0.281931312009590000	0.208457472924795000	0.006204936099318240	0.480286652129458000	0.240839918322812000	0.218348286404294000	0.063396307174564500	0.176973716016131000	0.000971857135024123	0.072008256454129600	0.285716385060456000	0.017639776803597000	0.041852496248721000	0.197300057824415000	0.138498518843740000	0.224449737136144000	0.126611451784599000	0.205099649321047000	0.336240922843081000	0.102433520962986000	0.133991954288690000	0.079375923903192900	0.103215806977358000	0.004085733313949310	0.022817307260293000	0.106317535905962000	0.128562885621379000	0.085677103088632700	0.161647455889921000	0.171941228799414000
    0.214529305910209000	0.305230742422731000	0.005434308273644280	0.002160436256063180	0.140577067319243000	0.230591031557517000	0.190944183201647000	0.235562172114220000	0.087631328877100200	0.104821751204218000	0.097083832369851500	0.106200873836129000	0.043247066311292400	0.071384872571840100	0.092785333454326400	0.222423248738583000	0.249767673279573000	0.249325367690561000	0.346616955224759000	0.079743332970965700	0.218650020387244000	0.310567530968577000	0.001848747783110320	0.016900967137318200	0.142660812517929000	0.264333703128356000	0.007127125663812120	0.175354096789077000	0.180029852397266000	0.206015293959806000
    0.400105371152567000	0.289638343760390000	0.092652285168755100	0.066290904321923300	0.056145734431469500	0.047370502145904100	0.363033429342103000	0.057114584389308900	0.261526459222218000	0.383275485078992000	0.077307055231103800	0.034897938285434600	0.091532635348732500	0.105247679887108000	0.314191696965170000	0.033970886600095200	0.080578281092763300	0.191148731701536000	0.041713641133846500	0.004880422388645050	0.082659968614302200	0.207625456015619000	0.104413111696669000	0.096968306091479000	0.063619402194958300	0.172265949121087000	0.013763879820461200	0.322728322427701000	0.053649550479383900	0.069237234762297500
    0.197136704588530000	0.112625161330282000	0.079235001997122600	0.096167490384291900	0.112761186902770000	0.184561363989035000	0.355508157029841000	0.134401227506989000	0.192348944922429000	0.106569282735333000	0.076632904960589600	0.237687128692637000	0.181763096633431000	0.500767697614412000	0.185479360987173000	0.085644042038336400	0.118425695994113000	0.087245640433263900	0.055798569801968100	0.128673609901371000	0.140153795246215000	0.148358219468246000	0.195275921442867000	0.175093698111182000	0.153839924506055000	0.108100994243483000	0.180693406962505000	0.148513000571188000	0.056980438758404600	0.245715268911142000
    0.182526485500006000	0.090755160553130400	0.102616642590304000	0.152810608280956000	0.196273565645945000	0.118324900433935000	0.054092516242591800	0.131803000725060000	0.330449577366294000	0.390478553033183000	0.167013512203790000	0.185146500192851000	0.029438094663918500	0.200159925481745000	0.036236290944767000	0.068657830202278900	0.002740820656453220	0.017699551796615400	0.322655430124532000	0.103089480018961000	0.004181064725759950	0.144315580400664000	0.194712106397847000	0.187434741762575000	0.213666287260596000	0.083004061475288200	0.139596619554583000	0.079793640550913400	0.382966720676055000	0.216654003353087000
    0.152585836310676000	0.023775098246170700	0.174604201182158000	0.154800024090972000	0.100557344982883000	0.362775420494380000	0.230490988237642000	0.088972748040778600	0.010529749131058200	0.357842043026081000	0.074666568180261300	0.106793738537424000	0.055117260122478200	0.027886619493222800	0.342489149060512000	0.137050034500385000	0.223802370805848000	0.180805803408153000	0.217871710286744000	0.120699233780256000	0.125336281149789000	0.002883583180630460	0.244823315495920000	0.156810494433297000	0.036465193595975000	0.242129070165345000	0.085401978049607900	0.140738840539358000	0.311816290569407000	0.067506051239811100
    0.078019064138792300	0.183747600274885000	0.143785943875232000	0.131893812270011000	0.029991436245736500	0.201598794802609000	0.105001191528684000	0.037623813207951800	0.027147988691842700	0.028466888205925500	0.006483022186241930	0.288790995642550000	0.163626559630758000	0.152963885328385000	0.085686085475184900	0.206460521032948000	0.179117188461636000	0.385608776321985000	0.034930314200910900	0.494729489645044000	0.038667191375746300	0.085253749871994100	0.080172940903036500	0.186089985325691000	0.153677604290662000	0.068577477045276100	0.094506560418398800	0.386209817083493000	0.101574645160053000	0.098316753850803700
    0.281999369681217000	0.017184412542078200	0.110707124207769000	0.062386924579904500	0.203678557529582000	0.095883416584061700	0.085301107496100300	0.287473597555223000	0.196752879433937000	0.035521481535581100	0.200602262599513000	0.032145632784956000	0.333079070844234000	0.095560318318787000	0.118364342734608000	0.014215480679512300	0.045775535873873000	0.115054890208011000	0.039898540836791200	0.006371381112330810	0.461398107042644000	0.028428194079258500	0.178501353583814000	0.084657216068682100	0.255837849245909000	0.119656487526416000	0.048366701909976600	0.258874243311992000	0.355125343085185000	0.054514526385236000
    0.068036630765807200	0.128443036380533000	0.211749362817356000	0.077653189447137600	0.259888955254202000	0.130166965239429000	0.190300131150244000	0.021590687975291100	0.356626417608659000	0.024729054684097200	0.316982193586449000	0.187145088159917000	0.394649835735311000	0.019412558616154100	0.123267035536934000	0.238156173906049000	0.021166466558000700	0.124852733012395000	0.085427483468500800	0.003013654346648990	0.312614494485721000	0.244693236476931000	0.100903457195051000	0.184160619586067000	0.179201558531978000	0.090954468637955700	0.032075241930368100	0.175003125863030000	0.012283664097436100	0.135174244026695000];
M2=[0.049756530631038500	0.139379715041226000	0.035393161375499100	0.118692477516769000	0.203537006966879000	0.178385018870807000	0.218233492659143000	0.433617347590565000	0.240127138712958000	0.356243174035030000	0.147428743511154000	0.206288341567324000	0.061606403986613900	0.048020818123421300	0.013577661994145800	0.041545023223691400	0.082029652480109400	0.068722163875918800	0.024031266185036700	0.154369083906154000	0.218160875698486000	0.017142222911941300	0.067887803214506500	0.142087755684852000	0.176190540674318000	0.225552284791377000	0.199293176357281000	0.125736417958543000	0.300347449224585000	0.246554247436244000
    0.010750896346591300	0.057167026170415700	0.149259560615706000	0.019129735046554200	0.063188495209066100	0.259815067508605000	0.148807876713503000	0.095505528963464000	0.021381708599345700	0.171563805879887000	0.255788841598057000	0.040592038847393900	0.111039953851621000	0.286148498456659000	0.252050748039404000	0.190227344024957000	0.056954208981384900	0.039600475360534500	0.241209855260512000	0.109720837521087000	0.315756229811010000	0.073577792942241800	0.032529806290324500	0.313786500820235000	0.150974847133396000	0.404657342098515000	0.200892403268666000	0.033342175295918300	0.006906872316061290	0.269424589061937000
    0.261564961673823000	0.168861111634088000	0.058229201208582100	0.115155613947347000	0.083273253055802200	0.049550419204462500	0.233107714536429000	0.232595660290585000	0.346388921694083000	0.099038120758402600	0.273132734192347000	0.118415521097758000	0.210368123968781000	0.001768657688217630	0.108865473508138000	0.244950210905048000	0.044965331632110900	0.238949053378906000	0.076421663357674600	0.128101903097391000	0.006447663498510400	0.046507117068592800	0.027486914546361500	0.168554410582681000	0.256647840406042000	0.266351030149320000	0.199940389087555000	0.283829345014498000	0.243357885031578000	0.068935298555842500
    0.028504352478452300	0.225271989556550000	0.239889543768893000	0.091550978555013000	0.258936878045688000	0.255069705926787000	0.099884336388653600	0.157896294477033000	0.093983998752556200	0.079722202110578600	0.168996038248620000	0.063246643765383400	0.210862318618567000	0.189899860329832000	0.088728033344586100	0.225057446203595000	0.292971730889569000	0.223468431924678000	0.155863365817341000	0.078394979027830900	0.144134272263111000	0.396524526665318000	0.291719710888826000	0.239675670442656000	0.026947860563435200	0.031869176329919000	0.151381212009179000	0.072414061359644400	0.056577516891181000	0.093988329216068100
    0.114896709952888000	0.225350271303019000	0.135786394184327000	0.039639866907040600	0.025023000008174000	0.097074130903837200	0.324755481158180000	0.379501311055092000	0.053739837805315300	0.069494716306554000	0.219909424984554000	0.305910247693138000	0.002648858070855470	0.022231072393760500	0.292298402526855000	0.115311023641046000	0.165290772573322000	0.072904071251584300	0.304084731081255000	0.284035477681234000	0.180516743688307000	0.085561787983329500	0.165885321370033000	0.090895624302306800	0.032431558569351400	0.070640655683998300	0.061667704148641700	0.313519862354550000	0.120130225276404000	0.059475282895842500
    0.202156137665302000	0.124908428347042000	0.172845607464346000	0.391408620339295000	0.277418002675200000	0.026329699840846700	0.004972491840171630	0.132431408622341000	0.116306643751206000	0.337762867933979000	0.066356937071934600	0.001766597758823470	0.138561078471591000	0.090676673395507200	0.157255423034576000	0.085723555887614500	0.004147681895365050	0.056105394986238900	0.145527207200891000	0.265255003877142000	0.379817358986644000	0.077199791455575200	0.178411747615886000	0.050055831636322800	0.192413309831925000	0.131484115539283000	0.175742112342980000	0.191431939826316000	0.196141094534475000	0.184787837177497000
    0.019189723088442700	0.397696837747174000	0.075837551616230000	0.042555763133141200	0.053773138264545900	0.129455636476166000	0.166742597928489000	0.235475415353986000	0.093767573952783000	0.188766429057037000	0.274406602283589000	0.000255220241971263	0.078961631425078500	0.210727601016123000	0.189890066805523000	0.293645972443939000	0.244859688023653000	0.404611479445041000	0.088521728343012500	0.060265999875808000	0.254679989015861000	0.066614862397743400	0.229010582636490000	0.199160971808233000	0.030825977112142300	0.011252545089912100	0.158827807829777000	0.080873660736637900	0.094557303878881900	0.004816929429514430
    0.028703072975005200	0.460072570685888000	0.256580556888436000	0.172029939505526000	0.053412673743000000	0.311315879387663000	0.246892640014095000	0.162076056699345000	0.170486941310064000	0.138339334669605000	0.079123409653979600	0.101539145025994000	0.372357967080464000	0.018687742654505600	0.095971394267152200	0.305295497317354000	0.100208967463299000	0.085701735492846700	0.106422402782868000	0.115162593864930000	0.110962418586843000	0.013181642801837300	0.088971877370277400	0.103547054923111000	0.037917413031497200	0.097187063271102300	0.009379790033160890	0.317230235647276000	0.119122193668026000	0.001103229426214410
    0.511539195301641000	0.032401317479977900	0.134561267407393000	0.042831567869102500	0.291636337759923000	0.216991830397484000	0.172674379230001000	0.207007905702384000	0.048694203199338900	0.053313315135133900	0.276197542328998000	0.465972329605198000	0.064790932950430200	0.068191813385298000	0.199652290472636000	0.069541835660284300	0.104976377762643000	0.006438416284754460	0.022187765123180600	0.031924393176772800	0.071652934958815100	0.138022605288628000	0.074087482313975300	0.064026586779700000	0.235542456422110000	0.064347351672227400	0.146437814116356000	0.129722795689238000	0.113721783244461000	0.056440893639382500
    0.147122130989008000	0.087665385084949800	0.089797852453957800	0.120844454696251000	0.102337993914227000	0.131702660207748000	0.264178230265924000	0.058057594140030600	0.343708201146806000	0.128450844414988000	0.073052479599176200	0.103952276849852000	0.040907596902935100	0.189238155590267000	0.038806299092757300	0.319816251848174000	0.135623982136405000	0.029550477352438700	0.025440107528118300	0.214845269565306000	0.249231579454368000	0.183428857152471000	0.017741225644278000	0.394807269648655000	0.232469485287036000	0.093688673572482500	0.250755696583965000	0.317402695771519000	0.024565409335719200	0.099518652531879200
    0.315190054603195000	0.142233835594549000	0.227904185587482000	0.114000659406012000	0.050544421346562100	0.017974760004764600	0.035697459163312800	0.074466715320251600	0.209724360030713000	0.202763134886810000	0.010972273025045100	0.235032382242042000	0.098828678099086200	0.313680562365011000	0.151179596961539000	0.065763369949941400	0.056073109801101200	0.158169903647489000	0.329839557400320000	0.206079814697813000	0.139634448430837000	0.150298399217447000	0.111128248970840000	0.323518343713246000	0.224656998088582000	0.062775448279332100	0.192808747697403000	0.262982726131094000	0.110760808165002000	0.135830139899360000
    0.263803256369541000	0.164884529529808000	0.087069403304734300	0.059522896526152400	0.148996547679940000	0.037400317031199700	0.275829292931689000	0.232236432537700000	0.312592653969950000	0.167872474539546000	0.048830414812242000	0.101703013110242000	0.275746908470946000	0.229926154624053000	0.317475226352650000	0.314001665557726000	0.051045347134648200	0.287216998822913000	0.140300301982004000	0.019325009704311200	0.084409293057335600	0.007208162028399780	0.110260858138477000	0.139949987151681000	0.226312764643961000	0.164050729501630000	0.022886801301958700	0.046529473241401600	0.212446220776591000	0.039240900319580500
    0.054052857190207200	0.140442599989616000	0.322692351523442000	0.199447394975600000	0.144778933898077000	0.071023188614768400	0.281030346949313000	0.232986276413728000	0.002749157484281220	0.176237793527783000	0.385228346183190000	0.104835990687898000	0.102429761891991000	0.023729653799629200	0.034531674105430000	0.038782039436892800	0.180605486271857000	0.137045745353859000	0.136556545695206000	0.485272826385052000	0.074088471167043300	0.124566509013853000	0.180320898144353000	0.245402749352666000	0.041154673389686500	0.089007606027426200	0.000382951475369889	0.162072770679538000	0.118731177539261000	0.026574739714754700
    0.002207650585681580	0.124876275887952000	0.032201582091651200	0.143881675137165000	0.048780203213828500	0.175783328286003000	0.037905172617383300	0.090268257722332700	0.259032669716679000	0.130290628137700000	0.053328727750074500	0.236704065064704000	0.124194526581318000	0.192913899203787000	0.052265190147608000	0.056167214215279900	0.336646894353431000	0.283465828801677000	0.019951066801672900	0.165872109151777000	0.405245077029133000	0.368544817952418000	0.138213782902980000	0.087965924223057900	0.115563006955007000	0.003943757057565000	0.247790309082385000	0.135797506120950000	0.034106940149487800	0.274708490684390000
    0.162367587988270000	0.072491449029296900	0.207308855214435000	0.066783276169157400	0.295731823530308000	0.013949169399533900	0.053782568993992200	0.111896882809939000	0.109965844549738000	0.088794548192562400	0.090248799128484500	0.007290415788119090	0.015184129992030000	0.039833442910424500	0.062355980348947400	0.114205751602020000	0.271834778649538000	0.137483902007887000	0.192499784899102000	0.154290686282571000	0.147411272364139000	0.163647169214069000	0.126600930884152000	0.299923902873757000	0.228200989746848000	0.302406690404841000	0.554918981953889000	0.031790054236488000	0.032954907768533200	0.096168598927380000
    0.133611776117390000	0.009956052150104090	0.275382146024545000	0.228591575027715000	0.123389328384793000	0.034133980504833600	0.279064510246561000	0.214459632248228000	0.002092704712287800	0.022260298842502400	0.142416885584468000	0.153892620643951000	0.015887125708880500	0.333990808584736000	0.081087155044987000	0.093956527347581900	0.185142311330089000	0.115868489443766000	0.403734223758273000	0.226889821703074000	0.173136397654452000	0.128691326007518000	0.376907239954921000	0.149239117948966000	0.116435458944624000	0.038720760686293700	0.047375414842452500	0.033661338448956900	0.024945871087081000	0.223427498620676000
    0.047073429918297700	0.166267268613554000	0.138620660158030000	0.137269369384766000	0.085144630377627600	0.319300622498888000	0.130718718604603000	0.163051874739459000	0.032085420058382200	0.125950387351669000	0.124519732231815000	0.158509551818053000	0.085061640695700900	0.080254785082404100	0.438402968214539000	0.009353639705088070	0.177420029640428000	0.053772981123689200	0.270261438206190000	0.122584544325001000	0.038669707082438300	0.069775260438152800	0.459650246690066000	0.179824350935102000	0.183332314608212000	0.218452349490954000	0.120525712750392000	0.006272786954284990	0.149029050185441000	0.158733203591072000
    0.388298445694410000	0.119309151903669000	0.080775443111364800	0.216610678810271000	0.136734182145728000	0.332050066415135000	0.059580940667521200	0.086650700432540000	0.160756387118098000	0.376157397123946000	0.080491694118232500	0.422535231648426000	0.289410282414302000	0.224614293716814000	0.030976202196751700	0.032917992485181200	0.147259080030390000	0.105788032692900000	0.075918484919885700	0.198095713121061000	0.050960949889864400	0.099994621386596800	0.081403562560076900	0.148590610390950000	0.104421028150760000	0.069831111770584500	0.058200326378457400	0.056979693036322800	0.093332163819542100	0.051182059480984500
    0.032740443880568700	0.279594290710074000	0.056289792355754900	0.265366078500331000	0.113868793131868000	0.489745482765866000	0.113610913246374000	0.230093280225296000	0.009551323987529690	0.187975934852512000	0.182553406964572000	0.146620480881120000	0.198773370325381000	0.020934121010075300	0.248481834752447000	0.198872799538174000	0.129560251535333000	0.116062709181107000	0.018531477780764200	0.058729288536418700	0.080794878828721900	0.260252914161226000	0.276451622213364000	0.092135749984779000	0.073376064103640400	0.116478553098799000	0.161396122931082000	0.006157085152347030	0.231672779372229000	0.071239519315154800
    0.083882046619715400	0.108006232326423000	0.181782908833610000	0.018927335251081900	0.099653757942618200	0.073889102745620800	0.134666669093419000	0.032328691851257400	0.047972396298928100	0.003403383762419370	0.164202054452817000	0.333237530053519000	0.075617710685292000	0.085078341427514100	0.164935090252315000	0.251461556866945000	0.174915050627933000	0.511881453821209000	0.131965271954331000	0.014776430206594000	0.020597361483114500	0.314690964576340000	0.080679770683948100	0.307077883903562000	0.159443696944877000	0.175870444732251000	0.101048680508178000	0.282758839298099000	0.049361910039593500	0.100720488734830000
    0.036067352141643200	0.017065866376406100	0.043666713110328200	0.125660581754373000	0.022204747893129300	0.057217419593016700	0.194364429108876000	0.209350190500912000	0.518907799041818000	0.070556579291300500	0.030200516999509600	0.000926295983476560	0.072840624733566900	0.140294228650233000	0.095348397936443500	0.156337004545038000	0.319049027248554000	0.209459876919109000	0.274991331461846000	0.157950612262155000	0.082256489843598100	0.126930848966942000	0.119115502065754000	0.199367785766379000	0.279174046912875000	0.354254728930051000	0.163364116585948000	0.081239560162112900	0.024793569405189600	0.035727205470614000
    0.065302006243514600	0.167461390268424000	0.236749426844079000	0.456794962183267000	0.033671856217066600	0.239803965636399000	0.130466973818141000	0.170473273299092000	0.097505163364588300	0.100666089539030000	0.133930536875534000	0.130415245772932000	0.406293841305962000	0.142396591734444000	0.012714309720969400	0.112170413963725000	0.077604559044404600	0.080793438040973500	0.367128356597634000	0.093917212810055700	0.097892453450715700	0.020654054975267900	0.157163287379207000	0.055217956316235500	0.035063120778688600	0.084098342196275000	0.056196285442593400	0.218119004184896000	0.217712786686603000	0.212670699677748000
    0.085770403292171800	0.140407622697408000	0.142179946631845000	0.156923926603290000	0.362329127470091000	0.156550112996290000	0.058533647047229400	0.122672166471709000	0.165139744505843000	0.227425928333062000	0.215963012239767000	0.058236285689144100	0.116459535655523000	0.156011853636118000	0.397845902789118000	0.122797977648438000	0.051977018522349200	0.139648677182496000	0.094368854379585100	0.053055245714244200	0.072254835668657600	0.080632729108079200	0.084832330728423100	0.085805037950360200	0.142605298343379000	0.415566861137261000	0.161161617243429000	0.069922925502724600	0.219296884370014000	0.285210223999262000
    0.114821370806034000	0.220329206697123000	0.013578893771745800	0.223855461594161000	0.228137963603185000	0.001053158741823910	0.011471426394353400	0.107513496072814000	0.040565720867562800	0.099758717544809300	0.042233933971958600	0.057497404913154700	0.414161544848062000	0.487544473006660000	0.054565253703845800	0.259042398614955000	0.080593068883518500	0.008973575835127410	0.092740025353104100	0.024591368453105600	0.221181670266804000	0.116275600924466000	0.213930502659307000	0.044567520358989200	0.236917685269998000	0.075304249097827300	0.165700630960589000	0.029981023292501200	0.269398208190682000	0.198829393396790000
    0.116199675940618000	0.166399783782076000	0.029946793503562600	0.063815380223792500	0.065171710562433400	0.072830097009286900	0.324281138676685000	0.101620797201650000	0.000621737085888504	0.057718597448587800	0.180770880798364000	0.033157981315860100	0.013849923306081800	0.021953956518271500	0.016034640416616400	0.061176623227298800	0.165240455082421000	0.128973370491197000	0.113288866295074000	0.219049546914883000	0.037947774386703100	0.546753385963841000	0.278900476294381000	0.090444985922494800	0.222432579694623000	0.143653414346779000	0.263397112958117000	0.262118468178905000	0.105865259083987000	0.276613856119541000
    0.152007212705888000	0.110619600190685000	0.279679917349168000	0.166191642022054000	0.314109131116801000	0.023842832518891900	0.012153055696002200	0.072045899587287200	0.241414496147436000	0.114662748188789000	0.339780800206423000	0.025323176983412400	0.166682485092320000	0.108267094488627000	0.233397501099416000	0.105797790263338000	0.236855339999224000	0.029558620702704600	0.003696788014978640	0.116601410590524000	0.007246221247437050	0.093710815964906800	0.185187255977498000	0.069029626514861300	0.093292903127792500	0.074713057304367000	0.071119973810124900	0.394430876979067000	0.398268882133355000	0.097659036515536000
    0.167125320342146000	0.192282818561347000	0.435532416986910000	0.324951874226271000	0.109835406122765000	0.059001132039753100	0.118544786120486000	0.034805816149184300	0.130487104816990000	0.140848323298939000	0.183420465849759000	0.027314104390093800	0.132862792184162000	0.246678874141547000	0.077653560249794600	0.305549326455595000	0.055449446427930300	0.157531212120894000	0.184493244872320000	0.269006445930849000	0.223249150914757000	0.028487047599765400	0.028700890824528800	0.054673496226601700	0.018772679606186600	0.066514749630322100	0.140682024825568000	0.151390180495379000	0.349841814087700000	0.034976333319522100
    0.252157430166252000	0.157583678566701000	0.249130141626343000	0.172702567799069000	0.142662339149594000	0.005634951435346990	0.156691801413353000	0.030567774794545000	0.042424032599572600	0.184430534810569000	0.257952658453243000	0.125543262277245000	0.160542346554769000	0.044948799996538400	0.131655669574262000	0.040123991853329300	0.020854699486851200	0.025815216670343400	0.187803017746281000	0.031887688222183700	0.255491798315961000	0.136529186633951000	0.045002155134639600	0.082046445706297500	0.438334370256087000	0.035405616703259600	0.068198941266823300	0.168348315920820000	0.031076955304821800	0.501556248930643000
    0.189742118378840000	0.176512731407887000	0.121162404414611000	0.157203409238424000	0.422964861254957000	0.056156818499583700	0.033522165633722400	0.129204832140095000	0.033433973513574600	0.332166450441821000	0.095840713844486800	0.224032230034997000	0.196800318444380000	0.192834703409071000	0.160315159177841000	0.182221084453410000	0.289987396381143000	0.090103249357804100	0.054639488523800500	0.140146840778466000	0.251749990337430000	0.010534181418750100	0.050557014450169500	0.162521495791157000	0.231013064010653000	0.088958030680472900	0.151325002973948000	0.024799291316709900	0.071565618797393300	0.301190129942026000
    0.148973398582225000	0.061686779934658100	0.009930092268059150	0.000348568878729499	0.054194660057315500	0.224857879101688000	0.280081417238643000	0.178783544205168000	0.046936816294157400	0.242074812298651000	0.067167552402747600	0.145788256854798000	0.105661416721066000	0.069358369513284600	0.159104263474195000	0.220265607268495000	0.356354768026095000	0.237908408558048000	0.141294355069514000	0.309210571366672000	0.032417175490480800	0.038873591338973500	0.196403848798880000	0.107253884170866000	0.110560451609672000	0.298447303066801000	0.210241917773821000	0.003517573869844370	0.359677502805688000	0.083306711434418700];

fitness_value=0;
switch id
    case 1
        z=(x-o(:,1));
        fitness_value=sum(z.^2);
        fitness_value=fitness_value-1400;
    case 2
        z=M1*(x-o(:,1));
        z=z';
        for i=1:dim
            if z(i)~=0
                z_hat(i)=log(abs(z(i)));
            else
                z_hat(i)=0;
            end
            if z(i)>0
                c1(i)=10;
            else
                c1(i)=5.5;
            end
            if z(i)>0
                c2(i)=7.9;
            else
                c2(i)=3.1;
            end
        end
        z=sign(z).*exp(z_hat+0.049.*(sin(c1.*z_hat)+sin(c2.*z_hat)));
        i=1:1:dim;
        fitness_value=sum(((10^6).^((i-1)/(dim-1))).*(z.^2));
        fitness_value=fitness_value-1300;
    case 3
        z=M1*(x-o(:,1));
        for i=1:dim
            if z(i)>0
                z(i)=z(i)^(1+0.5*((i-1)/(dim-1))*sqrt(z(i)));
            end
        end
        z=M2*z;
        for i=2:dim
            fitness_value=fitness_value+z(i)^2;
        end
        fitness_value=(z(1)^2)+(10^6)*fitness_value-1200;
    case 4
        z=M1*(x-o(:,1));
        z=z';
        for i=1:dim
            if z(i)~=0
                z_hat(i)=log(abs(z(i)));
            else
                z_hat(i)=0;
            end
            if z(i)>0
                c1(i)=10;
            else
                c1(i)=5.5;
            end
            if z(i)>0
                c2(i)=7.9;
            else
                c2(i)=3.1;
            end
        end
        z=sign(z).*exp(z_hat+0.049.*(sin(c1.*z_hat)+sin(c2.*z_hat)));
        for i=2:dim
            fitness_value=fitness_value+(z(i)^2);
        end
        fitness_value=((10^6)*(z(1)^2))+fitness_value-1100;
    case 5
        z=(x-o(:,1));
        for i=1:dim
            fitness_value=fitness_value+abs(z(i))^(2+4*((i-1)/(dim-1)));
        end
        fitness_value=sqrt(fitness_value)-1000;
    case 6
        z=M1*(2.048*(x-o(:,1))/100)+1;
        for i=1:dim-1
            fitness_value=fitness_value+(100*((z(i)^2)-z(i+1))^2)+(z(i)-1)^2;
        end
        fitness_value=fitness_value-900;
    case 7
        z=M1*(x-o(:,1));
        for i=1:dim
            if z(i)>0
                z(i)=z(i)^(1+0.5*((i-1)/(dim-1))*sqrt(z(i)));
            end
        end
        z=diag(10.^(((1:dim)-1)/(2*(dim-1))))*M2*z;
        for i=1:dim-1
            fitness_value=fitness_value+(sqrt(sqrt((z(i)^2)+(z(i+1)^2)))+sqrt(sqrt((z(i)^2)+(z(i+1)^2)))*(sin(50*(((z(i)^2)+(z(i+1)^2))^0.2))^2));
        end
        fitness_value=((fitness_value*(1/(dim-1)))^2)-800;
    case 8
        z=M1*(x-o(:,1));
        for i=1:dim
            if z(i)>0
                z(i)=z(i)^(1+0.5*((i-1)/(dim-1))*sqrt(z(i)));
            end
        end
        z=diag(10.^(((1:dim)-1)/(2*(dim-1))))*M2*z;
        fitness_value=sum(z.^2);
        fitness_value_reg=sum(cos(2*pi*z));
        fitness_value=-20*exp(-0.2*sqrt((1/dim)*fitness_value))-exp((1/dim)*fitness_value_reg)+20+exp(1)-700;
    case 9
        z=M1*(0.5*(x-o(:,1))/100);
        for i=1:dim
            if z(i)>0
                z(i)=z(i)^(1+0.5*((i-1)/(dim-1))*sqrt(z(i)));
            end
        end
        z=diag(10.^(((1:dim)-1)/(2*(dim-1))))*M2*z;
        j=0:1:20;
        a1=0.5.^j;
        a2=3.^j;
        fitness_value_reg=sum(a1.*cos(2*pi*a2*0.5));
        for i=1:dim
            fitness_value=fitness_value+sum(a1.*cos(2*pi*a2*(z(i)+0.5)));
        end
        fitness_value=fitness_value-dim*fitness_value_reg-600;
    case 10
        z=M1*(600*(x-o(:,1))/100);
        z=diag(100.^(((1:dim)-1)/(2*(dim-1))))*z;
        fitness_value_reg=1;
        for i=1:dim
            fitness_value=fitness_value+(z(i)^2);
            fitness_value_reg=fitness_value_reg*cos((z(i))/sqrt(i));
        end
        fitness_value=(1/4000)*fitness_value-fitness_value_reg+1-500;
    case 11
        z=(5.12*(x-o(:,1))/100);
        z=z';
        for i=1:dim
            if z(i)~=0
                z_hat(i)=log(abs(z(i)));
            else
                z_hat(i)=0;
            end
            if z(i)>0
                c1(i)=10;
            else
                c1(i)=5.5;
            end
            if z(i)>0
                c2(i)=7.9;
            else
                c2(i)=3.1;
            end
        end
        z=sign(z).*exp(z_hat+0.049.*(sin(c1.*z_hat)+sin(c2.*z_hat)));
        for i=1:dim
            if z(i)>0
                z(i)=z(i)^(1+0.2*((i-1)/(dim-1))*sqrt(z(i)));
            end
        end
        z=diag(10.^(((1:dim)-1)/(2*(dim-1))))*z';
        for i=1:dim
            fitness_value=fitness_value+((z(i)^2)-10*cos(2*pi.*z(i))+10);
        end
        fitness_value=fitness_value-400;
    case 12
        z=M1*(5.12*(x-o(:,1))/100);
        z=z';
        for i=1:dim
            if z(i)~=0
                z_hat(i)=log(abs(z(i)));
            else
                z_hat(i)=0;
            end
            if z(i)>0
                c1(i)=10;
            else
                c1(i)=5.5;
            end
            if z(i)>0
                c2(i)=7.9;
            else
                c2(i)=3.1;
            end
        end
        z=sign(z).*exp(z_hat+0.049.*(sin(c1.*z_hat)+sin(c2.*z_hat)));
        for i=1:dim
            if z(i)>0
                z(i)=z(i)^(1+0.2*((i-1)/(dim-1))*sqrt(z(i)));
            end
        end
        z=M1*diag(10.^(((1:dim)-1)/(2*(dim-1))))*M2*z';
        for i=1:dim
            fitness_value=fitness_value+((z(i)^2)-10*cos(2*pi.*z(i))+10);
        end
        fitness_value=fitness_value-300;
    case 13
        z=M1*(5.12*(x-o(:,1))/100);
        for i=1:dim
            if abs(z(i))>0.5
                z(i)=round(2*z(i))/2;
            end
        end
        z=z';
        for i=1:dim
            if z(i)~=0
                z_hat(i)=log(abs(z(i)));
            else
                z_hat(i)=0;
            end
            if z(i)>0
                c1(i)=10;
            else
                c1(i)=5.5;
            end
            if z(i)>0
                c2(i)=7.9;
            else
                c2(i)=3.1;
            end
        end
        z=sign(z).*exp(z_hat+0.049.*(sin(c1.*z_hat)+sin(c2.*z_hat)));
        for i=1:dim
            if z(i)>0
                z(i)=z(i)^(1+0.2*((i-1)/(dim-1))*sqrt(z(i)));
            end
        end
        z=M1*diag(10.^(((1:dim)-1)/(2*(dim-1))))*M2*z';
        for i=1:dim
            fitness_value=fitness_value+((z(i)^2)-10*cos(2*pi.*z(i))+10);
        end
        fitness_value=fitness_value-200;
    case 14
        z=diag(10.^(((1:dim)-1)/(2*(dim-1))))*(1000*(x-o(:,1))/100)+420.9687462275036;
        for i=1:dim
            if abs(z(i))<=500
                fitness_value=fitness_value+z(i)*sin(abs(z(i))^0.5);
            elseif z(i)>500
                fitness_value=fitness_value+(500-mod(z(i),500))*sin(sqrt(abs((500-mod(z(i),500)))))-(((z(i)-500)^2)/(10000*dim));
            else
                fitness_value=fitness_value+(mod(abs(z(i)),500)-500)*sin(sqrt(abs((mod(abs(z(i)),500)-500))))-(((z(i)+500)^2)/(10000*dim));
            end
        end
        fitness_value=418.9829*dim-fitness_value-100;
    case 15
        z=diag(10.^(((1:dim)-1)/(2*(dim-1))))*M1*(1000*(x-o(:,1))/100)+420.9687462275036;
        for i=1:dim
            if abs(z(i))<=500
                fitness_value=fitness_value+z(i)*sin(abs(z(i))^0.5);
            elseif z(i)>500
                fitness_value=fitness_value+(500-mod(z(i),500))*sin(sqrt(abs((500-mod(z(i),500)))))-(((z(i)-500)^2)/(10000*dim));
            else
                fitness_value=fitness_value+(mod(abs(z(i)),500)-500)*sin(sqrt(abs((mod(abs(z(i)),500)-500))))-(((z(i)+500)^2)/(10000*dim));
            end
        end
        fitness_value=418.9829*dim-fitness_value+100;
    case 16
        z=M2*diag(100.^(((1:dim)-1)/(2*(dim-1))))*M1*(5*(x-o(:,1))/100);
        fitness_value=1;
        for i=1:dim
            fitness_value_reg=0;
            for j=1:32
                fitness_value_reg=fitness_value_reg+(abs((2^j)*z(i)-round((2^j)*z(i)))/(2^j));
            end
            fitness_value=fitness_value*((1+i*fitness_value_reg)^(10/(dim^1.2)));
        end
        fitness_value=(10/(dim^2))*fitness_value-(10/(dim^2))+200;
    case 17
        x_hat=2*sign(o(:,1)).*(10*(x-o(:,1))/100)+2.5;
        z=diag(100.^(((1:dim)-1)/(2*(dim-1))))*(x_hat-2.5);
        fitness_value_reg=0;
        for i=1:dim
            fitness_value=fitness_value+(x_hat(i)-2.5)^2;
            fitness_value_reg=fitness_value_reg+(x_hat(i)-(-sqrt(((2.5^2)-1)/(1-(1/(2*sqrt(dim+20)-8.2))))))^2;
        end
        fitness_value_reg=dim+(1-(1/(2*sqrt(dim+20)-8.2)))*fitness_value_reg;
        fitness_value=min(fitness_value,fitness_value_reg)+10*(dim-sum(cos(2*pi*z)))+300;
    case 18
        x_hat=2*sign(o(:,1)).*(10*(x-o(:,1))/100)+2.5;
        z=M2*diag(100.^(((1:dim)-1)/(2*(dim-1))))*M1*(x_hat-2.5);
        fitness_value_reg=0;
        for i=1:dim
            fitness_value=fitness_value+(x_hat(i)-2.5)^2;
            fitness_value_reg=fitness_value_reg+(x_hat(i)-(-sqrt(((2.5^2)-1)/(1-(1/(2*sqrt(dim+20)-8.2))))))^2;
        end
        fitness_value_reg=dim+(1-(1/(2*sqrt(dim+20)-8.2)))*fitness_value_reg;
        fitness_value=min(fitness_value,fitness_value_reg)+10*(dim-sum(cos(2*pi*z)))+400;
    case 19
        z=M1*(5*(x-o(:,1))/100)+1;
        for i=1:dim
            if i==dim
                y(i)=(100*((z(i)^2)-z(1))^2)+(z(i)-1)^2;
            else
                y(i)=(100*((z(i)^2)-z(i+1))^2)+(z(i)-1)^2;
            end
        end
        fitness_value_reg=1;
        for i=1:dim
            fitness_value=fitness_value+(y(i)^2);
            fitness_value_reg=fitness_value_reg*cos((y(i))/sqrt(i));
        end
        fitness_value=(1/4000)*fitness_value-fitness_value_reg+1+500;
    case 20
        z=M1*(x-o(:,1));
        for i=1:dim
            if z(i)>0
                z(i)=z(i)^(1+0.5*((i-1)/(dim-1))*sqrt(z(i)));
            end
        end
        z=M2*z;
        for i=1:dim
            if i==dim
                fitness_value=fitness_value+0.5+(((sin(sqrt((z(i)^2)+(z(1)^2)))^2)-0.5)/((1+0.001*((z(i)^2)+(z(1)^2)))^2))+600;
            else
                fitness_value=fitness_value+0.5+(((sin(sqrt((z(i)^2)+(z(i+1)^2)))^2)-0.5)/((1+0.001*((z(i)^2)+(z(i+1)^2)))^2));
            end
        end
    case 21
        w=zeros(1,5);
        for i=1:5
            if sqrt(sum((x-o(:,i)).^2))==0
                w(i)=1;
                break;
            end
        end
        if sum(w)==0
            w(1)=(1/(sqrt(sum((x-o(:,1)).^2))))*exp(-(sum((x-o(:,1)).^2)/(2*dim*(10^2))));
            w(2)=(1/(sqrt(sum((x-o(:,2)).^2))))*exp(-(sum((x-o(:,2)).^2)/(2*dim*(20^2))));
            w(3)=(1/(sqrt(sum((x-o(:,3)).^2))))*exp(-(sum((x-o(:,3)).^2)/(2*dim*(30^2))));
            w(4)=(1/(sqrt(sum((x-o(:,4)).^2))))*exp(-(sum((x-o(:,4)).^2)/(2*dim*(40^2))));
            w(5)=(1/(sqrt(sum((x-o(:,5)).^2))))*exp(-(sum((x-o(:,5)).^2)/(2*dim*(50^2))));
        end
        w=w./sum(w);
        
        fitness_value_1=0;
        z=M1*(2.048*(x-o(:,1))/100)+1;
        for i=1:dim-1
            fitness_value_1=fitness_value_1+(100*((z(i)^2)-z(i+1))^2)+(z(i)-1)^2;
        end
        fitness_value_1=fitness_value_1;
        
        fitness_value_2=0;
        z=(x-o(:,2));
        for i=1:dim
            fitness_value_2=fitness_value_2+abs(z(i))^(2+4*((i-1)/(dim-1)));
        end
        fitness_value_2=sqrt(fitness_value_2);
        
        fitness_value_3=0;
        z=M1*(x-o(:,3));
        for i=1:dim
            if z(i)>0
                z(i)=z(i)^(1+0.5*((i-1)/(dim-1))*sqrt(z(i)));
            end
        end
        z=M2*z;
        for i=2:dim
            fitness_value_3=fitness_value_3+z(i)^2;
        end
        fitness_value_3=(z(1)^2)+(10^6)*fitness_value_3;
        
        fitness_value_4=0;
        z=M1*(x-o(:,4));
        z=z';
        for i=1:dim
            if z(i)~=0
                z_hat(i)=log(abs(z(i)));
            else
                z_hat(i)=0;
            end
            if z(i)>0
                c1(i)=10;
            else
                c1(i)=5.5;
            end
            if z(i)>0
                c2(i)=7.9;
            else
                c2(i)=3.1;
            end
        end
        z=sign(z).*exp(z_hat+0.049.*(sin(c1.*z_hat)+sin(c2.*z_hat)));
        for i=2:dim
            fitness_value_4=fitness_value_4+(z(i)^2);
        end
        fitness_value_4=((10^6)*(z(1)^2))+fitness_value_4;
        
        fitness_value_5=0;
        z=(x-o(:,5));
        fitness_value_5=sum(z.^2);
        fitness_value_5=fitness_value_5;
        
        fitness_value=fitness_value+w(1)*(fitness_value_1);
        fitness_value=fitness_value+w(2)*((1e-6)*fitness_value_2+100);
        fitness_value=fitness_value+w(3)*((1e-26)*fitness_value_3+200);
        fitness_value=fitness_value+w(4)*((1e-6)*fitness_value_4+300);
        fitness_value=fitness_value+w(5)*((0.1)*fitness_value_5+400);
        fitness_value=fitness_value+700;
    case 22
        w=zeros(1,3);
        for i=1:3
            if sqrt(sum((x-o(:,i)).^2))==0
                w(i)=1;
                break;
            end
        end
        if sum(w)==0
            w(1)=(1/(sqrt(sum((x-o(:,1)).^2))))*exp(-(sum((x-o(:,1)).^2)/(2*dim*(20^2))));
            w(2)=(1/(sqrt(sum((x-o(:,2)).^2))))*exp(-(sum((x-o(:,2)).^2)/(2*dim*(20^2))));
            w(3)=(1/(sqrt(sum((x-o(:,3)).^2))))*exp(-(sum((x-o(:,3)).^2)/(2*dim*(20^2))));
        end
        w=w./sum(w);
        
        fitness_value_1=0;
        z=diag(10.^(((1:dim)-1)/(2*(dim-1))))*(1000*(x-o(:,1))/100)+420.9687462275036;
        for i=1:dim
            if abs(z(i))<=500
                fitness_value_1=fitness_value_1+z(i)*sin(abs(z(i))^0.5);
            elseif z(i)>500
                fitness_value_1=fitness_value_1+(500-mod(z(i),500))*sin(sqrt(abs((500-mod(z(i),500)))))-(((z(i)-500)^2)/(10000*dim));
            else
                fitness_value_1=fitness_value_1+(mod(abs(z(i)),500)-500)*sin(sqrt(abs((mod(abs(z(i)),500)-500))))-(((z(i)+500)^2)/(10000*dim));
            end
        end
        fitness_value_1=418.9829*dim-fitness_value_1;
        
        fitness_value_2=0;
        z=diag(10.^(((1:dim)-1)/(2*(dim-1))))*(1000*(x-o(:,2))/100)+420.9687462275036;
        for i=1:dim
            if abs(z(i))<=500
                fitness_value_2=fitness_value_2+z(i)*sin(abs(z(i))^0.5);
            elseif z(i)>500
                fitness_value_2=fitness_value_2+(500-mod(z(i),500))*sin(sqrt(abs((500-mod(z(i),500)))))-(((z(i)-500)^2)/(10000*dim));
            else
                fitness_value_2=fitness_value_2+(mod(abs(z(i)),500)-500)*sin(sqrt(abs((mod(abs(z(i)),500)-500))))-(((z(i)+500)^2)/(10000*dim));
            end
        end
        fitness_value_2=418.9829*dim-fitness_value_2;
        
        fitness_value_3=0;
        z=diag(10.^(((1:dim)-1)/(2*(dim-1))))*(1000*(x-o(:,3))/100)+420.9687462275036;
        for i=1:dim
            if abs(z(i))<=500
                fitness_value_3=fitness_value_3+z(i)*sin(abs(z(i))^0.5);
            elseif z(i)>500
                fitness_value_3=fitness_value_3+(500-mod(z(i),500))*sin(sqrt(abs((500-mod(z(i),500)))))-(((z(i)-500)^2)/(10000*dim));
            else
                fitness_value_3=fitness_value_3+(mod(abs(z(i)),500)-500)*sin(sqrt(abs((mod(abs(z(i)),500)-500))))-(((z(i)+500)^2)/(10000*dim));
            end
        end
        fitness_value_3=418.9829*dim-fitness_value_3;
        
        fitness_value=fitness_value+w(1)*(fitness_value_1);
        fitness_value=fitness_value+w(2)*(fitness_value_2+100);
        fitness_value=fitness_value+w(3)*(fitness_value_3+200);
        fitness_value=fitness_value+800;
    case 23
        w=zeros(1,3);
        for i=1:3
            if sqrt(sum((x-o(:,i)).^2))==0
                w(i)=1;
                break;
            end
        end
        if sum(w)==0
            w(1)=(1/(sqrt(sum((x-o(:,1)).^2))))*exp(-(sum((x-o(:,1)).^2)/(2*dim*(20^2))));
            w(2)=(1/(sqrt(sum((x-o(:,2)).^2))))*exp(-(sum((x-o(:,2)).^2)/(2*dim*(20^2))));
            w(3)=(1/(sqrt(sum((x-o(:,3)).^2))))*exp(-(sum((x-o(:,3)).^2)/(2*dim*(20^2))));
        end
        w=w./sum(w);
        
        fitness_value_1=0;
        z=diag(10.^(((1:dim)-1)/(2*(dim-1))))*M1*(1000*(x-o(:,1))/100)+420.9687462275036;
        for i=1:dim
            if abs(z(i))<=500
                fitness_value_1=fitness_value_1+z(i)*sin(abs(z(i))^0.5);
            elseif z(i)>500
                fitness_value_1=fitness_value_1+(500-mod(z(i),500))*sin(sqrt(abs((500-mod(z(i),500)))))-(((z(i)-500)^2)/(10000*dim));
            else
                fitness_value_1=fitness_value_1+(mod(abs(z(i)),500)-500)*sin(sqrt(abs((mod(abs(z(i)),500)-500))))-(((z(i)+500)^2)/(10000*dim));
            end
        end
        fitness_value_1=418.9829*dim-fitness_value_1;
        
        fitness_value_2=0;
        z=diag(10.^(((1:dim)-1)/(2*(dim-1))))*M1*(1000*(x-o(:,2))/100)+420.9687462275036;
        for i=1:dim
            if abs(z(i))<=500
                fitness_value_2=fitness_value_2+z(i)*sin(abs(z(i))^0.5);
            elseif z(i)>500
                fitness_value_2=fitness_value_2+(500-mod(z(i),500))*sin(sqrt(abs((500-mod(z(i),500)))))-(((z(i)-500)^2)/(10000*dim));
            else
                fitness_value_2=fitness_value_2+(mod(abs(z(i)),500)-500)*sin(sqrt(abs((mod(abs(z(i)),500)-500))))-(((z(i)+500)^2)/(10000*dim));
            end
        end
        fitness_value_2=418.9829*dim-fitness_value_2;
        
        fitness_value_3=0;
        z=diag(10.^(((1:dim)-1)/(2*(dim-1))))*M1*(1000*(x-o(:,3))/100)+420.9687462275036;
        for i=1:dim
            if abs(z(i))<=500
                fitness_value_3=fitness_value_3+z(i)*sin(abs(z(i))^0.5);
            elseif z(i)>500
                fitness_value_3=fitness_value_3+(500-mod(z(i),500))*sin(sqrt(abs((500-mod(z(i),500)))))-(((z(i)-500)^2)/(10000*dim));
            else
                fitness_value_3=fitness_value_3+(mod(abs(z(i)),500)-500)*sin(sqrt(abs((mod(abs(z(i)),500)-500))))-(((z(i)+500)^2)/(10000*dim));
            end
        end
        fitness_value_3=418.9829*dim-fitness_value_3;
        
        fitness_value=fitness_value+w(1)*(fitness_value_1);
        fitness_value=fitness_value+w(2)*(fitness_value_2+100);
        fitness_value=fitness_value+w(3)*(fitness_value_3+200);
        fitness_value=fitness_value+900;
    case 24
        w=zeros(1,3);
        for i=1:3
            if sqrt(sum((x-o(:,i)).^2))==0
                w(i)=1;
                break;
            end
        end
        if sum(w)==0
            w(1)=(1/(sqrt(sum((x-o(:,1)).^2))))*exp(-(sum((x-o(:,1)).^2)/(2*dim*(20^2))));
            w(2)=(1/(sqrt(sum((x-o(:,2)).^2))))*exp(-(sum((x-o(:,2)).^2)/(2*dim*(20^2))));
            w(3)=(1/(sqrt(sum((x-o(:,3)).^2))))*exp(-(sum((x-o(:,3)).^2)/(2*dim*(20^2))));
        end
        w=w./sum(w);
        
        fitness_value_1=0;
        z=diag(10.^(((1:dim)-1)/(2*(dim-1))))*M1*(1000*(x-o(:,1))/100)+420.9687462275036;
        for i=1:dim
            if abs(z(i))<=500
                fitness_value_1=fitness_value_1+z(i)*sin(abs(z(i))^0.5);
            elseif z(i)>500
                fitness_value_1=fitness_value_1+(500-mod(z(i),500))*sin(sqrt(abs((500-mod(z(i),500)))))-(((z(i)-500)^2)/(10000*dim));
            else
                fitness_value_1=fitness_value_1+(mod(abs(z(i)),500)-500)*sin(sqrt(abs((mod(abs(z(i)),500)-500))))-(((z(i)+500)^2)/(10000*dim));
            end
        end
        fitness_value_1=418.9829*dim-fitness_value_1;
        
        fitness_value_2=0;
        z=M1*(5.12*(x-o(:,2))/100);
        z=z';
        for i=1:dim
            if z(i)~=0
                z_hat(i)=log(abs(z(i)));
            else
                z_hat(i)=0;
            end
            if z(i)>0
                c1(i)=10;
            else
                c1(i)=5.5;
            end
            if z(i)>0
                c2(i)=7.9;
            else
                c2(i)=3.1;
            end
        end
        z=sign(z).*exp(z_hat+0.049.*(sin(c1.*z_hat)+sin(c2.*z_hat)));
        for i=1:dim
            if z(i)>0
                z(i)=z(i)^(1+0.2*((i-1)/(dim-1))*sqrt(z(i)));
            end
        end
        z=M1*diag(10.^(((1:dim)-1)/(2*(dim-1))))*M2*z';
        for i=1:dim
            fitness_value_2=fitness_value_2+((z(i)^2)-10*cos(2*pi.*z(i))+10);
        end
        fitness_value_2=fitness_value_2;
        
        fitness_value_3=0;
        z=M1*(0.5*(x-o(:,3))/100);
        for i=1:dim
            if z(i)>0
                z(i)=z(i)^(1+0.5*((i-1)/(dim-1))*sqrt(z(i)));
            end
        end
        z=diag(10.^(((1:dim)-1)/(2*(dim-1))))*M2*z;
        j=0:1:20;
        a1=0.5.^j;
        a2=3.^j;
        fitness_value_reg=sum(a1.*cos(2*pi*a2*0.5));
        for i=1:dim
            fitness_value_3=fitness_value_3+sum(a1.*cos(2*pi*a2*(z(i)+0.5)));
        end
        fitness_value_3=fitness_value_3-dim*fitness_value_reg;
        
        fitness_value=fitness_value+w(1)*(0.25*fitness_value_1);
        fitness_value=fitness_value+w(2)*(fitness_value_2+100);
        fitness_value=fitness_value+w(3)*(2.5*fitness_value_3+200);
        fitness_value=fitness_value+1000;
    case 25
        w=zeros(1,3);
        for i=1:3
            if sqrt(sum((x-o(:,i)).^2))==0
                w(i)=1;
                break;
            end
        end
        if sum(w)==0
            w(1)=(1/(sqrt(sum((x-o(:,1)).^2))))*exp(-(sum((x-o(:,1)).^2)/(2*dim*(10^2))));
            w(2)=(1/(sqrt(sum((x-o(:,2)).^2))))*exp(-(sum((x-o(:,2)).^2)/(2*dim*(30^2))));
            w(3)=(1/(sqrt(sum((x-o(:,3)).^2))))*exp(-(sum((x-o(:,3)).^2)/(2*dim*(50^2))));
        end
        w=w./sum(w);
        
        fitness_value_1=0;
        z=diag(10.^(((1:dim)-1)/(2*(dim-1))))*M1*(1000*(x-o(:,1))/100)+420.9687462275036;
        for i=1:dim
            if abs(z(i))<=500
                fitness_value_1=fitness_value_1+z(i)*sin(abs(z(i))^0.5);
            elseif z(i)>500
                fitness_value_1=fitness_value_1+(500-mod(z(i),500))*sin(sqrt(abs((500-mod(z(i),500)))))-(((z(i)-500)^2)/(10000*dim));
            else
                fitness_value_1=fitness_value_1+(mod(abs(z(i)),500)-500)*sin(sqrt(abs((mod(abs(z(i)),500)-500))))-(((z(i)+500)^2)/(10000*dim));
            end
        end
        fitness_value_1=418.9829*dim-fitness_value_1;
        
        fitness_value_2=0;
        z=M1*(5.12*(x-o(:,2))/100);
        z=z';
        for i=1:dim
            if z(i)~=0
                z_hat(i)=log(abs(z(i)));
            else
                z_hat(i)=0;
            end
            if z(i)>0
                c1(i)=10;
            else
                c1(i)=5.5;
            end
            if z(i)>0
                c2(i)=7.9;
            else
                c2(i)=3.1;
            end
        end
        z=sign(z).*exp(z_hat+0.049.*(sin(c1.*z_hat)+sin(c2.*z_hat)));
        for i=1:dim
            if z(i)>0
                z(i)=z(i)^(1+0.2*((i-1)/(dim-1))*sqrt(z(i)));
            end
        end
        z=M1*diag(10.^(((1:dim)-1)/(2*(dim-1))))*M2*z';
        for i=1:dim
            fitness_value_2=fitness_value_2+((z(i)^2)-10*cos(2*pi.*z(i))+10);
        end
        fitness_value_2=fitness_value_2;
        
        fitness_value_3=0;
        z=M1*(0.5*(x-o(:,3))/100);
        for i=1:dim
            if z(i)>0
                z(i)=z(i)^(1+0.5*((i-1)/(dim-1))*sqrt(z(i)));
            end
        end
        z=diag(10.^(((1:dim)-1)/(2*(dim-1))))*M2*z;
        j=0:1:20;
        a1=0.5.^j;
        a2=3.^j;
        fitness_value_reg=sum(a1.*cos(2*pi*a2*0.5));
        for i=1:dim
            fitness_value_3=fitness_value_3+sum(a1.*cos(2*pi*a2*(z(i)+0.5)));
        end
        fitness_value_3=fitness_value_3-dim*fitness_value_reg;
        
        fitness_value=fitness_value+w(1)*(0.25*fitness_value_1);
        fitness_value=fitness_value+w(2)*(fitness_value_2+100);
        fitness_value=fitness_value+w(3)*(2.5*fitness_value_3+200);
        fitness_value=fitness_value+1100;
    case 26
        w=zeros(1,5);
        for i=1:5
            if sqrt(sum((x-o(:,i)).^2))==0
                w(i)=1;
                break;
            end
        end
        if sum(w)==0
            w(1)=(1/(sqrt(sum((x-o(:,1)).^2))))*exp(-(sum((x-o(:,1)).^2)/(2*dim*(10^2))));
            w(2)=(1/(sqrt(sum((x-o(:,2)).^2))))*exp(-(sum((x-o(:,2)).^2)/(2*dim*(10^2))));
            w(3)=(1/(sqrt(sum((x-o(:,3)).^2))))*exp(-(sum((x-o(:,3)).^2)/(2*dim*(10^2))));
            w(4)=(1/(sqrt(sum((x-o(:,4)).^2))))*exp(-(sum((x-o(:,4)).^2)/(2*dim*(10^2))));
            w(5)=(1/(sqrt(sum((x-o(:,5)).^2))))*exp(-(sum((x-o(:,5)).^2)/(2*dim*(10^2))));
        end
        w=w./sum(w);
        
        fitness_value_1=0;
        z=diag(10.^(((1:dim)-1)/(2*(dim-1))))*M1*(1000*(x-o(:,1))/100)+420.9687462275036;
        for i=1:dim
            if abs(z(i))<=500
                fitness_value_1=fitness_value_1+z(i)*sin(abs(z(i))^0.5);
            elseif z(i)>500
                fitness_value_1=fitness_value_1+(500-mod(z(i),500))*sin(sqrt(abs((500-mod(z(i),500)))))-(((z(i)-500)^2)/(10000*dim));
            else
                fitness_value_1=fitness_value_1+(mod(abs(z(i)),500)-500)*sin(sqrt(abs((mod(abs(z(i)),500)-500))))-(((z(i)+500)^2)/(10000*dim));
            end
        end
        fitness_value_1=418.9829*dim-fitness_value_1;
        
        fitness_value_2=0;
        z=M1*(5.12*(x-o(:,2))/100);
        z=z';
        for i=1:dim
            if z(i)~=0
                z_hat(i)=log(abs(z(i)));
            else
                z_hat(i)=0;
            end
            if z(i)>0
                c1(i)=10;
            else
                c1(i)=5.5;
            end
            if z(i)>0
                c2(i)=7.9;
            else
                c2(i)=3.1;
            end
        end
        z=sign(z).*exp(z_hat+0.049.*(sin(c1.*z_hat)+sin(c2.*z_hat)));
        for i=1:dim
            if z(i)>0
                z(i)=z(i)^(1+0.2*((i-1)/(dim-1))*sqrt(z(i)));
            end
        end
        z=M1*diag(10.^(((1:dim)-1)/(2*(dim-1))))*M2*z';
        for i=1:dim
            fitness_value_2=fitness_value_2+((z(i)^2)-10*cos(2*pi.*z(i))+10);
        end
        fitness_value_2=fitness_value_2;
        
        fitness_value_3=0;
        z=M1*(x-o(:,3));
        z=z';
        for i=1:dim
            if z(i)~=0
                z_hat(i)=log(abs(z(i)));
            else
                z_hat(i)=0;
            end
            if z(i)>0
                c1(i)=10;
            else
                c1(i)=5.5;
            end
            if z(i)>0
                c2(i)=7.9;
            else
                c2(i)=3.1;
            end
        end
        z=sign(z).*exp(z_hat+0.049.*(sin(c1.*z_hat)+sin(c2.*z_hat)));
        i=1:1:dim;
        fitness_value_3=sum(((10^6).^((i-1)/(dim-1))).*(z.^2));
        fitness_value_3=fitness_value_3;
        
        fitness_value_4=0;
        z=M1*(0.5*(x-o(:,4))/100);
        for i=1:dim
            if z(i)>0
                z(i)=z(i)^(1+0.5*((i-1)/(dim-1))*sqrt(z(i)));
            end
        end
        z=diag(10.^(((1:dim)-1)/(2*(dim-1))))*M2*z;
        j=0:1:20;
        a1=0.5.^j;
        a2=3.^j;
        fitness_value_reg=sum(a1.*cos(2*pi*a2*0.5));
        for i=1:dim
            fitness_value_4=fitness_value_4+sum(a1.*cos(2*pi*a2*(z(i)+0.5)));
        end
        fitness_value_4=fitness_value_4-dim*fitness_value_reg;
        
        fitness_value_5=0;
        z=M1*(600*(x-o(:,5))/100);
        z=diag(100.^(((1:dim)-1)/(2*(dim-1))))*z;
        fitness_value_reg=1;
        for i=1:dim
            fitness_value_5=fitness_value_5+(z(i)^2);
            fitness_value_reg=fitness_value_reg*cos((z(i))/sqrt(i));
        end
        fitness_value_5=(1/4000)*fitness_value_5-fitness_value_reg+1;
        
        fitness_value=fitness_value+w(1)*(0.25*fitness_value_1);
        fitness_value=fitness_value+w(2)*(fitness_value_2+100);
        fitness_value=fitness_value+w(3)*((1e-7)*fitness_value_3+200);
        fitness_value=fitness_value+w(4)*(2.5*fitness_value_4+300);
        fitness_value=fitness_value+w(5)*(10*fitness_value_5+400);
        fitness_value=fitness_value+1200;
    case 27
        w=zeros(1,5);
        for i=1:5
            if sqrt(sum((x-o(:,i)).^2))==0
                w(i)=1;
                break;
            end
        end
        if sum(w)==0
            w(1)=(1/(sqrt(sum((x-o(:,1)).^2))))*exp(-(sum((x-o(:,1)).^2)/(2*dim*(10^2))));
            w(2)=(1/(sqrt(sum((x-o(:,2)).^2))))*exp(-(sum((x-o(:,2)).^2)/(2*dim*(10^2))));
            w(3)=(1/(sqrt(sum((x-o(:,3)).^2))))*exp(-(sum((x-o(:,3)).^2)/(2*dim*(10^2))));
            w(4)=(1/(sqrt(sum((x-o(:,4)).^2))))*exp(-(sum((x-o(:,4)).^2)/(2*dim*(20^2))));
            w(5)=(1/(sqrt(sum((x-o(:,5)).^2))))*exp(-(sum((x-o(:,5)).^2)/(2*dim*(20^2))));
        end
        w=w./sum(w);
        
        fitness_value_1=0;
        z=M1*(600*(x-o(:,1))/100);
        z=diag(100.^(((1:dim)-1)/(2*(dim-1))))*z;
        fitness_value_reg=1;
        for i=1:dim
            fitness_value_1=fitness_value_1+(z(i)^2);
            fitness_value_reg=fitness_value_reg*cos((z(i))/sqrt(i));
        end
        fitness_value_1=(1/4000)*fitness_value_1-fitness_value_reg+1;
        
        fitness_value_2=0;
        z=M1*(5.12*(x-o(:,2))/100);
        z=z';
        for i=1:dim
            if z(i)~=0
                z_hat(i)=log(abs(z(i)));
            else
                z_hat(i)=0;
            end
            if z(i)>0
                c1(i)=10;
            else
                c1(i)=5.5;
            end
            if z(i)>0
                c2(i)=7.9;
            else
                c2(i)=3.1;
            end
        end
        z=sign(z).*exp(z_hat+0.049.*(sin(c1.*z_hat)+sin(c2.*z_hat)));
        for i=1:dim
            if z(i)>0
                z(i)=z(i)^(1+0.2*((i-1)/(dim-1))*sqrt(z(i)));
            end
        end
        z=M1*diag(10.^(((1:dim)-1)/(2*(dim-1))))*M2*z';
        for i=1:dim
            fitness_value_2=fitness_value_2+((z(i)^2)-10*cos(2*pi.*z(i))+10);
        end
        fitness_value_2=fitness_value_2;
        
        fitness_value_3=0;
        z=diag(10.^(((1:dim)-1)/(2*(dim-1))))*M1*(1000*(x-o(:,3))/100)+420.9687462275036;
        for i=1:dim
            if abs(z(i))<=500
                fitness_value_3=fitness_value_3+z(i)*sin(abs(z(i))^0.5);
            elseif z(i)>500
                fitness_value_3=fitness_value_3+(500-mod(z(i),500))*sin(sqrt(abs((500-mod(z(i),500)))))-(((z(i)-500)^2)/(10000*dim));
            else
                fitness_value_3=fitness_value_3+(mod(abs(z(i)),500)-500)*sin(sqrt(abs((mod(abs(z(i)),500)-500))))-(((z(i)+500)^2)/(10000*dim));
            end
        end
        fitness_value_3=418.9829*dim-fitness_value_3;
        
        fitness_value_4=0;
        z=M1*(0.5*(x-o(:,4))/100);
        for i=1:dim
            if z(i)>0
                z(i)=z(i)^(1+0.5*((i-1)/(dim-1))*sqrt(z(i)));
            end
        end
        z=diag(10.^(((1:dim)-1)/(2*(dim-1))))*M2*z;
        j=0:1:20;
        a1=0.5.^j;
        a2=3.^j;
        fitness_value_reg=sum(a1.*cos(2*pi*a2*0.5));
        for i=1:dim
            fitness_value_4=fitness_value_4+sum(a1.*cos(2*pi*a2*(z(i)+0.5)));
        end
        fitness_value_4=fitness_value_4-dim*fitness_value_reg;
        
        fitness_value_5=0;
        z=(x-o(:,5));
        fitness_value_5=sum(z.^2);
        fitness_value_5=fitness_value_5;
        
        fitness_value=fitness_value+w(1)*(100*fitness_value_1);
        fitness_value=fitness_value+w(2)*(10*fitness_value_2+100);
        fitness_value=fitness_value+w(3)*(2.5*fitness_value_3+200);
        fitness_value=fitness_value+w(4)*(25*fitness_value_4+300);
        fitness_value=fitness_value+w(5)*(0.1*fitness_value_5+400);
        fitness_value=fitness_value+1300;
    case 28
        w=zeros(1,5);
        for i=1:5
            if sqrt(sum((x-o(:,i)).^2))==0
                w(i)=1;
                break;
            end
        end
        if sum(w)==0
            w(1)=(1/(sqrt(sum((x-o(:,1)).^2))))*exp(-(sum((x-o(:,1)).^2)/(2*dim*(10^2))));
            w(2)=(1/(sqrt(sum((x-o(:,2)).^2))))*exp(-(sum((x-o(:,2)).^2)/(2*dim*(20^2))));
            w(3)=(1/(sqrt(sum((x-o(:,3)).^2))))*exp(-(sum((x-o(:,3)).^2)/(2*dim*(30^2))));
            w(4)=(1/(sqrt(sum((x-o(:,4)).^2))))*exp(-(sum((x-o(:,4)).^2)/(2*dim*(40^2))));
            w(5)=(1/(sqrt(sum((x-o(:,5)).^2))))*exp(-(sum((x-o(:,5)).^2)/(2*dim*(50^2))));
        end
        w=w./sum(w);
        
        fitness_value_1=0;
        z=M1*(5*(x-o(:,1))/100)+1;
        for i=1:dim
            if i==dim
                y(i)=(100*((z(i)^2)-z(1))^2)+(z(i)-1)^2;
            else
                y(i)=(100*((z(i)^2)-z(i+1))^2)+(z(i)-1)^2;
            end
        end
        fitness_value_reg=1;
        for i=1:dim
            fitness_value_1=fitness_value_1+(y(i)^2);
            fitness_value_reg=fitness_value_reg*cos((y(i))/sqrt(i));
        end
        fitness_value_1=(1/4000)*fitness_value_1-fitness_value_reg+1;
        
        fitness_value_2=0;
        z=M1*(x-o(:,2));
        for i=1:dim
            if z(i)>0
                z(i)=z(i)^(1+0.5*((i-1)/(dim-1))*sqrt(z(i)));
            end
        end
        z=diag(10.^(((1:dim)-1)/(2*(dim-1))))*M2*z;
        for i=1:dim-1
            fitness_value_2=fitness_value_2+(sqrt(sqrt((z(i)^2)+(z(i+1)^2)))+sqrt(sqrt((z(i)^2)+(z(i+1)^2)))*(sin(50*(((z(i)^2)+(z(i+1)^2))^0.2))^2));
        end
        fitness_value_2=((fitness_value_2*(1/(dim-1)))^2);
        
        fitness_value_3=0;
        z=diag(10.^(((1:dim)-1)/(2*(dim-1))))*M1*(1000*(x-o(:,3))/100)+420.9687462275036;
        for i=1:dim
            if abs(z(i))<=500
                fitness_value_3=fitness_value_3+z(i)*sin(abs(z(i))^0.5);
            elseif z(i)>500
                fitness_value_3=fitness_value_3+(500-mod(z(i),500))*sin(sqrt(abs((500-mod(z(i),500)))))-(((z(i)-500)^2)/(10000*dim));
            else
                fitness_value_3=fitness_value_3+(mod(abs(z(i)),500)-500)*sin(sqrt(abs((mod(abs(z(i)),500)-500))))-(((z(i)+500)^2)/(10000*dim));
            end
        end
        fitness_value_3=418.9829*dim-fitness_value_3;
        
        fitness_value_4=0;
        z=M1*(x-o(:,4));
        for i=1:dim
            if z(i)>0
                z(i)=z(i)^(1+0.5*((i-1)/(dim-1))*sqrt(z(i)));
            end
        end
        z=M2*z;
        for i=1:dim
            if i==dim
                fitness_value_4=fitness_value_4+0.5+(((sin(sqrt((z(i)^2)+(z(1)^2)))^2)-0.5)/((1+0.001*((z(i)^2)+(z(1)^2)))^2));
            else
                fitness_value_4=fitness_value_4+0.5+(((sin(sqrt((z(i)^2)+(z(i+1)^2)))^2)-0.5)/((1+0.001*((z(i)^2)+(z(i+1)^2)))^2));
            end
        end
        
        fitness_value_5=0;
        z=(x-o(:,5));
        fitness_value_5=sum(z.^2);
        fitness_value_5=fitness_value_5;
        
        fitness_value=fitness_value+w(1)*(2.5*fitness_value_1);
        fitness_value=fitness_value+w(2)*(0.0025*fitness_value_2+100);
        fitness_value=fitness_value+w(3)*(2.5*fitness_value_3+200);
        fitness_value=fitness_value+w(4)*(0.0005*fitness_value_4+300);
        fitness_value=fitness_value+w(5)*(0.1*fitness_value_5+400);
        fitness_value=fitness_value+1400;
end